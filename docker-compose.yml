version: '3.8'

services:
    flask_api:
        container_name: flask_api #Do not use when in a swarm; cannot scale a service beyond 1 container if you have specified a custom name
        restart: always
        build: ./flask
        ports: 
            - "8000:8000"
        depends_on: 
            - localstack
        networks:
            - frontend
            - backend
            - elastic

    localstack:
        image: localstack/localstack
        container_name: localstack
        ports:
            - "4569:4569" # dynamodb port
            - "9000:9000" #localstack ui port
        environment:
            - SERVICES=dynamodb # a list of desired services you want to use.
            - DEFAULT_REGION=eu-west-1 # This is the region where your localstack mocks to be running
            - DATA_DIR=/tmp/localstack/data
            - PORT_WEB_UI=9000
            - DOCKER_HOST=unix:///var/run/docker.sock
            - START_WEB=1
            - DEBUG=1
        volumes:
            - "./.localstack:/tmp/localstack"
            - "/var/run/docker.sock:/var/run/docker.sock"
        networks:
            - backend

    nginx:
        container_name: nginx
        restart: always
        build: ./nginx
        ports: 
            - "80:80"
        depends_on: 
            - flask_api
        networks:
            - frontend
    
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
        container_name: elasticsearch
        environment:
            - node.name=elasticsearch
            - cluster.name=es-docker-cluster
            - discovery.seed_hosts=elasticsearch02
            - cluster.initial_master_nodes=elasticsearch,elasticsearch02
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - data01:/usr/share/elasticsearch/data
        ports:
            - "9200:9200" #only accessible within the host; cannot be accessed publicly
        networks:
            - elastic

    elasticsearch02:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
        container_name: elasticsearch02
        environment:
            - node.name=elasticsearch02
            - cluster.name=es-docker-cluster
            - discovery.seed_hosts=elasticsearch
            - cluster.initial_master_nodes=elasticsearch,elasticsearch02
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - data02:/usr/share/elasticsearch/data
        networks:
            - elastic

    kibana:
        image: docker.elastic.co/kibana/kibana:7.8.0
        container_name: kibana
        ports:
            - "5601:5601"
        networks:
            - elastic
        depends_on:
            - elasticsearch
            - elasticsearch02

volumes:
    data01:
        driver: local
    data02:
        driver: local

networks:
    elastic:
        driver: bridge
    frontend:
        driver: bridge
    backend:
        driver: bridge
